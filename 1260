import java.util.*;
import java.lang.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws IOException{
    	BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));
    	String[] s=bf.readLine().split(" ");
    	int[] a=new int[3];
    	
    	for(int i=0;i<3;i++){
    		a[i]=Integer.parseInt(s[i]);
    	}
    	
    	int[][] b=new int[a[0]][a[0]];
    	int x, y;
    	
    	for(int i=0;i<a[1];i++){
    		s=bf.readLine().split(" ");
    		x=Integer.parseInt(s[0]);
    		y=Integer.parseInt(s[1]);
    		b[x-1][y-1]=b[y-1][x-1]=1;
    	}
    	
    	int[] check=new int[a[0]];
    	dfs(a[2],b,check);
    	System.out.println();
    	check=new int[a[0]];
    	bfs(a[2],b,check);
    }
    public static void dfs(int a, int[][] place,int[] check){
    	int nextA=a-1;
    	int b=place.length;
    	check[nextA]=1;
    	System.out.print((nextA+1)+" ");
    	
    	for(int i=1;i<=b;i++){
    		if(place[nextA][i-1]==1&&check[i-1]==0){
    			dfs(i,place,check);
    		}
    	}
    	
    }
    public static void bfs(int a, int[][] place,int[] check){
    	int nextA=a-1;
    	int b=place.length;
    	Queue<Integer> q=new LinkedList<Integer>();
    	q.add(a-1);
    	System.out.print((nextA+1)+" ");

    	check[nextA]=1;
    	
    	while(!q.isEmpty()){
    		
    		nextA=q.poll();
    		for(int i=0;i<b;i++){
    			if(place[nextA][i]==1&&check[i]!=1){
    				q.add(i);
    				place[nextA][i]=0;
    				System.out.print((i+1)+" ");
    				check[i]=1;
    			}
    		}
    	}
    	System.out.println(" ");
    	
    	return;
    }
}

//자세한 것은 https://github.com/cnr0724/AlgorithmStudy/blob/master/BFS%26DFS
